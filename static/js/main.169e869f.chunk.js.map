{"version":3,"sources":["logo.svg","sidemenu.js","components/verseCard.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","SideMenu","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","allButs","_this2","react_default","a","createElement","id","className","onClick","handleClose","map","e","i","handleClick","surahNumber","surahName","document","getElementById","style","width","_this3","fetch","then","response","json","arrayOfUsers","setState","catch","err","console","log","Component","verseCard","number","content","App","fetchData","status","handleRender","foo","bar","forEach","push","surah_number","components_verseCard","verse_number","handleOnClick","src_sidemenu","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yIAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,2MC6CzBC,iCAzCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACZC,QAAQ,IAJQR,wEAOV,IAAAS,EAAAN,KACP,OACEO,EAAAC,EAAAC,cAAA,OAAKC,GAAG,YAAYC,UAAU,WAC5BJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBAAiBC,QAASZ,KAAKa,aAA9C,KAEEb,KAAKI,MAAMC,QAAQS,IAAI,SAACC,EAAEC,GACtB,OACIT,EAAAC,EAAAC,cAAA,OAAME,UAAU,iBAAiBC,QAAS,SAACG,GAAD,OAAKT,EAAKV,MAAMqB,YAAYD,KAAtE,IAA4ED,EAAEG,YAA9E,MAA8FH,EAAEI,oDAQ7GC,SAASC,eAAe,aAAaC,MAAMC,MAAQ,kDAGnC,IAAAC,EAAAxB,KACbyB,MAAM,gDACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SACzBF,KAAK,SAAAG,GAEDL,EAAKM,SAAS,CACZzB,QAAQwB,MAIfE,MAAM,SAASC,GACdC,QAAQC,IAAIF,YArCCG,cCmBRC,qBAlBb,SAAAA,EAAYxC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAoC,IACjBvC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsC,GAAAjC,KAAAH,KAAMJ,KAEDQ,MAAQ,GAHIP,wEAOjB,OACEU,EAAAC,EAAAC,cAAA,OAAME,UAAU,aACdJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAAeX,KAAKJ,MAAMyC,QACxCrC,KAAKJ,MAAM0C,gBAXIH,cCwETI,cArEb,SAAAA,EAAY3C,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAuC,IACjB1C,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAyC,GAAApC,KAAAH,KAAMJ,KAqCR4C,UAAY,SAACxB,GACPI,SAASC,eAAe,aAAaC,MAAMC,MAAQ,MACnD1B,EAAKiC,SAAS,CAACW,OAAO,IACtBhB,MAAM,uCAAuCT,EAAE,SAC9CU,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SACzBF,KAAK,SAAAG,GAEDhC,EAAK6C,aAAab,KAEvBE,MAAM,SAASC,GACdC,QAAQC,IAAIF,MAhDDnC,EAmDnB6C,aAAe,SAACC,GACZ,IAAIC,EAAM,GAEVD,EAAIE,QAAQ,SAAC9B,EAAEC,GACP,GAAHA,GACD4B,EAAIE,KAAKvC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAAaI,EAAEgC,aAA9B,KAA8ChC,EAAEI,YAE3DyB,EAAIE,KACFvC,EAAAC,EAAAC,cAACuC,EAAD,CAAWX,OAAQtB,EAAEkC,aAAcX,QAAUvB,EAAEuB,aAInDzC,EAAKiC,SAAS,CAACzB,QAASuC,GAAK,WAC3B/C,EAAKiC,SAAS,CAACW,OAAO,OA7D1B5C,EAAKO,MAAQ,CACZC,QAAQ,GACRoC,OAAO,GALS5C,wEASjB,OACEU,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACTJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,mBAAmBC,QAASZ,KAAKkD,eAC5C3C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACfJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aAGjBX,KAAKI,MAAMqC,OACXzC,KAAKI,MAAMC,QAEX,GAGCL,KAAKI,MAAMqC,OAGZ,GAFAlC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAf,IAA0BJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WAAzC,KAIFJ,EAAAC,EAAAC,cAAC0C,EAAD,CAAWlC,YAAajB,KAAKwC,qDAKpCpB,SAASC,eAAe,aAAaC,MAAMC,MAAQ,4DAlCtCY,aCOEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASvC,SAASC,eAAe,SD2H3C,kBAAmBuC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.169e869f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport './sidemenu.css';\n\nclass SideMenu extends Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {\n     allButs:[]\n   };\n  }\n  render() {\n    return (\n      <div id=\"mySidenav\" className=\"sidenav\">\n        <div className=\"sidenav-button\" onClick={this.handleClose}>X</div>\n        {\n          this.state.allButs.map((e,i)=>{\n              return(\n                  <div  className=\"sidenav-button\" onClick={(e)=>this.props.handleClick(i)}> {e.surahNumber} : {e.surahName}</div>\n              )\n          })\n        }\n      </div>\n    );\n  }\n  handleClose(){\n     document.getElementById(\"mySidenav\").style.width = \"0px\";\n\n  }\n  componentDidMount(){\n        fetch('https://alquran-1234.firebaseio.com/114.json')\n        .then(response => response.json())\n         .then(arrayOfUsers => {\n              // console.log(arrayOfUse1rs);\n              this.setState({\n                allButs:arrayOfUsers\n              })\n              // rendersecondHTML(arrayOfUsers)\n         })\n        .catch(function(err){\n          console.log(err)\n        }) \n  }\n}\n\nexport default SideMenu;\n","import React, { Component } from 'react';\nimport '../css/verseCard.css';\n\nclass verseCard extends Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {\n   };\n  }\n  render() {\n    return (\n      <div  className=\"verseCard\">\n        <div className=\"verseNumber\">{this.props.number}</div>\n        {this.props.content}\n      </div>\n    );\n  }\n\n\n}\n\nexport default verseCard;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SidemMenu from './sidemenu.js'\nimport VerseCard from './components/verseCard.js'\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {\n     allButs:[],\n     status:1\n   };\n  }  \n  render() {\n    return (\n      <div className=\"App\">\n            <div className=\"menuBarContainer\" onClick={this.handleOnClick}>\n                <div className=\"menubar\"></div>\n                <div className=\"menubar\"></div>\n                <div className=\"menubar\"></div>\n            </div>\n            {\n              this.state.status?\n              this.state.allButs\n              :\n              \"\"\n            }\n            {\n              !this.state.status?\n              <div className=\"loading\"> <div className=\"loader\"></div> </div>\n              :\n              \"\"\n            }\n            <SidemMenu handleClick={this.fetchData}/>\n      </div>\n    );\n  }\n  handleOnClick(){\n     document.getElementById(\"mySidenav\").style.width = \"250px\";\n  }\n  componentDidMount(){\n\n  }\n  fetchData = (i)=>{\n        document.getElementById(\"mySidenav\").style.width = \"0px\";\n        this.setState({status:0})\n        fetch('https://alquran-1234.firebaseio.com/'+i+'.json')\n        .then(response => response.json())\n         .then(arrayOfUsers => {\n              // console.log(arrayOfUsers);\n              this.handleRender(arrayOfUsers)\n         })\n        .catch(function(err){\n          console.log(err)\n        })     \n  }\n  handleRender = (foo)=>{\n      let bar = []\n      // console.log(foo)\n      foo.forEach((e,i)=>{\n        if(i==0){\n          bar.push(<div className=\"surahName\">{e.surah_number}: {e.surahName}</div>)\n        }\n        bar.push(\n          <VerseCard number={e.verse_number} content= {e.content}/>\n          )          \n\n      })\n      this.setState({allButs: bar},()=>{\n        this.setState({status:1})\n      })\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}